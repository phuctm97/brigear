<?php 

use Drupal\Core\Template\Attribute;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;

// Shared hooks
function brigear_preprocess(&$variables, $hook)
{
    $variables['base_path'] = base_path();
}

function brigear_theme_suggestions_form_alter(&$suggestions, $variables) {
	if(_starts_with($variables['element']['#id'], 'views-form-commerce-cart-form')) {
		$suggestions[] = $variables['theme_hook_original'] . '__' . 'checkout';
	} 
	else if(_starts_with($variables['element']['#id'], 'commerce-checkout-flow-multistep')) {
		$suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#step_id'];
	}
}

function brigear_theme_suggestions_views_view_grid_alter(&$suggestions, $variables) {
	if($variables['view']->id() === 'product_categories') {
		$suggestions[] = $variables['theme_hook_original'] . '__product_categories';
	} else {
		$suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->getPath();
	}
}

// Checkout hooks
function brigear_form_views_form_commerce_cart_form_default_alter(&$form, $form_state, $form_id) {
	$form['#attributes']['class'][] = 'checkout-layout';

	// Header
	$form['checkout_header'] = array(
		'#weight' => -100, 
		'#type' => 'container', '#attributes' => array('class' => 'checkout-heading'),
		'title' => array('#type' => 'html_tag', '#tag' => 'h2', '#value' => 'Secure Checkout')
	);

	// Main content
	$cart = $form['output'][0]['#rows'][0]->_relationship_entities['order_items']->getOrder();
	$form['checkout_columns'] = array(
		'#weight' => -99,
		'#type' => 'container', '#attributes' => array('class' => 'checkout-columns'),

		// Col 1 - Review order
		'container' => array(
			'#type' => 'container', '#attributes' => array('class' => 'checkout-column-1'),

			// List items
			'list_items' => array(
				'#type' => 'container', '#attributes' => array('class' => 'checkout-cart-listItems')
			),

			// Subtotal
			'subtotal' => array(
				'#type' => 'container', '#attributes' => array('class' => 'checkout-subtotal'),
				'title' => array('#type' => 'html_tag', '#tag' => 'span', '#value' => 'SUBTOTAL'),
				'price' => array(
					'#type' => 'container',
					'number' => array(
						'#type' => 'html_tag', '#tag' => 'span', '#value' => number_format($cart->getSubtotalPrice()->getNumber(), 2),
						'#attributes' => array('class' => 'currency-monetary')
					),
					'currency_code' => array(
						'#type' => 'html_tag', '#tag' => 'span', '#value' => $cart->getSubtotalPrice()->getCurrencyCode(),
						'#attributes' => array('class' => 'currency-code')
					)
				)
			),

			// Total
		    'total' => array(
		    	'#type' => 'container', '#attributes' => array('class' => 'checkout-total'),
				'title' => array('#type' => 'html_tag', '#tag' => 'span', '#value' => 'TOTAL'),
				'price' => array(
					'#type' => 'container',
					'number' => array(
						'#type' => 'html_tag', '#tag' => 'span', '#value' => number_format($cart->getTotalPrice()->getNumber(), 2),
						'#attributes' => array('class' => 'currency-monetary')
					),
					'currency_code' => array(
						'#type' => 'html_tag', '#tag' => 'span', '#value' => $cart->getTotalPrice()->getCurrencyCode(),
						'#attributes' => array('class' => 'currency-code')
					)
				)
		    ),

		    // Clearfix
		    'clearfix' => array(
		    	'#type' => 'container', '#attributes' => array('style' => 'clear: both;')
		    ),

		    'actions' => array(
		    	'#type' => 'actions',
		    	'#attributes' => array('class' => array('row'), 'style' => 'margin: 0;'),
		    	'submit' => array_merge_recursive($form['actions']['submit'], array(
		    		'#attributes' => array(
		    			'class' => array('col-2', 'form-control', 'button-control')),
		    	)),
		    	'checkout' => array_merge_recursive($form['actions']['checkout'], array(
		    		'#attributes' => array(
		    			'class' => array('col-2', 'ml-auto', 'checkout-checkout-button')),
		    	))
		    )
		)
	);

	// Items
	foreach($form['output'][0]['#rows'] as $key => $item) {
		$order = $item->_relationship_entities['order_items'];
		$variation = $order->getPurchasedEntity();
		$product = $variation->getProduct();

		$form['checkout_columns']['container']['list_items'][$key] = array(
			'#type' => 'container', '#attributes' => array(
				'class' => array('row', 'checkout-cart-listItems-item')),
			'image' => array(
				'#type' => 'container', '#attributes' => array(
					'class' => array('col-3', 'checkout-cart-listItems-item-thumbnail')),
				'img' => array(
					'#type' => 'html_tag',
					'#tag' => 'img',
					'#attributes' => array('src' => file_create_url($variation->get('field_main_image')->entity->uri->value))
				)
			),
			'details' => array(
				'#type' => 'container', '#attributes' => array(
					'class' => array('col-9', 'checkout-cart-listItems-item-details')),
				'title' => array(
					'#weight' => 0,
					'#type' => 'link',
					'#title' => $product->getTitle(), 
					'#url' => $product->toUrl()
				),
				'color' => array(
					'#weight' => 1,
					'#type' => 'container', '#attributes' => array(
						'class' => array('checkout-cart-listItems-item-details-color')),
					'title' => array('#type' => 'html_tag', '#tag' => 'span',
						'#value' => 'Color'.': '),
					'value' => array('#type' => 'html_tag', '#tag' => 'span',
						'#value' => $variation->getAttributeValue('attribute_color')->getName())
				),
				'quantity' => array(
					'#weight' => 100,
					'#type' => 'container', '#attributes' => array(
						'class' => array('row', 'checkout-cart-listItems-item-quantity')),
					'title' => array('#type' => 'html_tag', '#tag' => 'span',
						'#value' => 'Quantity'.': '),
					'edit_quantity[' . $key . ']' => array_merge($form['edit_quantity'][$key], 
						array(
							'#attributes' => array(
								'class' => array('col-1', 'form-control', 'checkout-cart-listItems-item-quantitySelect')),
							'#min' => 1, 
							'#max' => 100,
							'#default_value' => (int) $order->getQuantity()))
				),
				'price' => array(
					'#weight' => 101,
					'#type' => 'container', '#attributes' => array(
						'title' => $order->getQuantity() . ' x ' . number_format($order->getUnitPrice()->getNumber(), 0) . ' ' . $order->getUnitPrice()->getCurrencyCode(),
						'class' => array('checkout-cart-listItems-item-price')),
					'container' => array(
						'#type' => 'html_tag',
						'#tag' => 'span',
						'#attributes' => array('class' => 'currency'),
						'number' => array(
							'#type' => 'html_tag',
							'#tag' => 'span',
							'#attributes' => array('class' => 'currency-monetary'),
							'#value' => number_format($order->getTotalPrice()->getNumber(), 2)
						),
						'currency_code' => array(
							'#type' => 'html_tag',
							'#tag' => 'span',
							'#attributes' => array('class' => 'currency-code'),
							'#value' => $order->getTotalPrice()->getCurrencyCode()
						)
					)
				),
				'remove' => array_merge($form['remove_button'][$key], array(
					'#attributes' => array(
						'class' => array('checkout-cart-listItems-item-remove')),
					'#value' => 'X'
				))
			)
		);

		foreach($variation->getAttributeFieldNames() as $attr) {
			if($attr === 'attribute_color') continue;
			$attr_value = $variation->getAttributeValue($attr);
			if(!$attr_value) continue;

			$form['checkout_columns']['container']['list_items'][$key]['details'][$attr] = array(
				'#weight' => 2,
				'#type' => 'container',
				'#attributes' => array('class' => array('checkout-cart-listItems-item-details-finish')),
				'title' => array('#type' => 'html_tag', '#tag' => 'span',
					'#value' => $attr_value->getAttribute()->get('label') . ': '),
				'value' => array('#type' => 'html_tag', '#tag' => 'span',
					'#value' => $attr_value->getName())
			);
		}
	}

	unset($form['output'], $form['actions'], $form['edit_quantity'], $form['remove_button']);
}

// Product hooks
function brigear_preprocess_commerce_product(&$variables) {    
    // Services
	$currency_storage = \Drupal::entityTypeManager()->getStorage('commerce_currency');

	// Prepare data
	$product_variations = array();
	$product_attributes = array();
	$product_data = array();

	$product = $variables['product_entity'];
	foreach($product->getVariations() as $variation) {
		$add_to_cart_link = $variables['product']['add_to_cart_links'][$variation->id()]['#url']->toString();
		$variation_entity = array(
			'id' => $variation->id(),
			'sku' => $variation->getSku(),
			'price' => $variation->getPrice(),
			'main_image' => $variation->get('field_main_image')->entity->uri->value,
			'add_to_cart_link' => $add_to_cart_link,
			'attributes' => new Attribute(array(
				'data-variation' => $variation->id()
			))
		);

		// Min price
		if(!array_key_exists('min_price', $product_data)) {
			$product_data['min_price'] = $variation_entity['price'];
		}
		else {
			if($product_data['min_price']->compareTo($variation_entity['price']) > 0) {
				$product_data['min_price'] = $variation_entity['price'];
			}
		}

		// Max price
		if(!array_key_exists('max_price', $product_data)) {
			$product_data['max_price'] = $variation_entity['price'];
		}
		else {
			if($product_data['max_price']->compareTo($variation_entity['price']) < 0) {
				$product_data['max_price'] = $variation_entity['price'];
			}
		}
		
		// Attributes
		foreach($variation->getAttributeFieldNames() as $attr) {
			$attr_value = $variation->getAttributeValue($attr);
			$attr_value_id = $variation->getAttributeValueId($attr);

			$variation_entity['attributes']['data-product-attribute-' . $attr] = $attr_value_id;
			if(empty($attr_value)) continue;

			if(!array_key_exists($attr, $product_attributes)) {
				$product_attributes[$attr] = array(
					'meta' => array(
						'name' => $attr_value->getAttribute()->get('label'),
						'type' => 'select',
						'weight' => 0
					),
					'data' => array()
				);
			}
			$product_attributes[$attr]['data'][$attr_value_id] = $attr_value;
		}

		// Add to array
		array_push($product_variations, $variation_entity);
	}

	// Price handling
	if(array_key_exists('min_price', $product_data)) {
		if($product_data['min_price']->compareTo($product_data['max_price']) === 0) {
			$product_data['only_price'] = _convert_price_to_array_with_symbol($product_data['min_price'], $currency_storage);
			unset($product_data['min_price']);
			unset($product_data['max_price']);
		}
		else {
			$product_data['min_price'] = _convert_price_to_array_with_symbol($product_data['min_price'], $currency_storage);
			$product_data['max_price'] = _convert_price_to_array_with_symbol($product_data['max_price'], $currency_storage);
		}
	}

	// Product info
	$product_data['id'] = $product->id();
	$product_data['url'] = $product->toUrl()->toString();

	// Export
    $variables['base_path'] = base_path();
	$variables['product_variations'] = $product_variations;
	$variables['product_attributes'] = $product_attributes;
	$variables['product_data'] = $product_data;
}

// Cart hooks
function brigear_preprocess_commerce_cart_block(&$variables) {
	$cart_provider = \Drupal::service('commerce_cart.cart_provider');

	// Prepare data
	$cart_data = array();

	// Get cart
	$cart = $cart_provider->getCart('default');

	// Item
	$cart_data['items'] = array();
	if($cart) {
		foreach($cart->getItems() as $cart_item) {
			$variation = $cart_item->getPurchasedEntity();
			$item = array(
				'url' => $variation->toUrl(),
				'product_url' => $variation->getProduct()->toUrl(),
				'title' => $variation->getProduct()->getTitle(),
				'main_image' => $variation->get('field_main_image')->entity->uri->value,
				'color' => $variation->getAttributeValue('attribute_color'),
				'quantity' => (int) $cart_item->getQuantity(),
				'unit_price' => $cart_item->getUnitPrice()->toArray()
			);
			array_push($cart_data['items'], $item);
		}
	}

	// Total
	$cart_data['subtotal'] = array('number' => 0, 'currency_code' => 'USD');
	if($cart) {
		$cart_data['subtotal'] = $cart->getSubtotalPrice()->toArray();
	}


	// Export
	$variables['cart_data'] = $cart_data;
}

// Utils
function _convert_price_to_array_with_symbol($price, $currency_storage) {
	return array(
		'number' => $price->getNumber(),
		'currency_code' => $price->getCurrencyCode(),
		'symbol' => $currency_storage->load($price->getCurrencyCode())->getSymbol()
	);
}

function _starts_with($string, $startString){ 
    $len = strlen($startString); 
    return (substr($string, 0, $len) === $startString); 
} 

?>