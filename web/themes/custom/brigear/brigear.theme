<?php 

use Drupal\Core\Template\Attribute;

function brigear_preprocess(&$variables, $hook)
{
    $variables['base_path'] = base_path();
}

function brigear_theme_suggestions_form_alter(&$suggestions, $variables) {
	if($variables['element']['#action'] === '/cart') {
		$suggestions[] = $variables['theme_hook_original'] . '__' . 'checkout';
	}
}

function brigear_theme_suggestions_views_view_grid_alter(&$suggestions, $variables) {
	$suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->getPath();
}

function brigear_preprocess_commerce_product(&$variables) {    
    // Services
	$currency_storage = \Drupal::entityTypeManager()->getStorage('commerce_currency');

	// Prepare data
	$product_variations = array();
	$product_attributes = array();
	$product_data = array();

	$product = $variables['product_entity'];
	foreach($product->getVariations() as $variation) {
		$add_to_cart_link = $variables['product']['add_to_cart_links'][$variation->id()]['#url']->toString();
		$variation_entity = array(
			'id' => $variation->id(),
			'sku' => $variation->getSku(),
			'price' => $variation->getPrice(),
			'main_image' => $variation->get('field_main_image')->entity->uri->value,
			'add_to_cart_link' => $add_to_cart_link,
			'attributes' => new Attribute(array(
				'data-variation' => $variation->id()
			))
		);

		// Min price
		if(!array_key_exists('min_price', $product_data)) {
			$product_data['min_price'] = $variation_entity['price'];
		}
		else {
			if($product_data['min_price']->compareTo($variation_entity['price']) > 0) {
				$product_data['min_price'] = $variation_entity['price'];
			}
		}

		// Max price
		if(!array_key_exists('max_price', $product_data)) {
			$product_data['max_price'] = $variation_entity['price'];
		}
		else {
			if($product_data['max_price']->compareTo($variation_entity['price']) < 0) {
				$product_data['max_price'] = $variation_entity['price'];
			}
		}
		
		// Attributes
		foreach($variation->getAttributeFieldNames() as $attr) {
			$attr_value = $variation->getAttributeValue($attr);
			$attr_value_id = $variation->getAttributeValueId($attr);

			$variation_entity['attributes']['data-product-attribute-' . $attr] = $attr_value_id;
			if(empty($attr_value)) continue;

			if(!array_key_exists($attr, $product_attributes)) {
				$product_attributes[$attr] = array(
					'meta' => array(
						'name' => $attr_value->getAttribute()->get('label'),
						'type' => 'select',
						'weight' => 0
					),
					'data' => array()
				);
			}
			$product_attributes[$attr]['data'][$attr_value_id] = $attr_value;
		}

		// Add to array
		array_push($product_variations, $variation_entity);
	}

	// Price handling
	if(array_key_exists('min_price', $product_data)) {
		if($product_data['min_price']->compareTo($product_data['max_price']) === 0) {
			$product_data['only_price'] = _convert_price_to_array_with_symbol($product_data['min_price'], $currency_storage);
			unset($product_data['min_price']);
			unset($product_data['max_price']);
		}
		else {
			$product_data['min_price'] = _convert_price_to_array_with_symbol($product_data['min_price'], $currency_storage);
			$product_data['max_price'] = _convert_price_to_array_with_symbol($product_data['max_price'], $currency_storage);
		}
	}

	// Product info
	$product_data['id'] = $product->id();
	$product_data['url'] = $product->toUrl()->toString();

	// Export
    $variables['base_path'] = base_path();
	$variables['product_variations'] = $product_variations;
	$variables['product_attributes'] = $product_attributes;
	$variables['product_data'] = $product_data;
}

function _convert_price_to_array_with_symbol($price, $currency_storage) {
	return array(
		'number' => $price->getNumber(),
		'currency_code' => $price->getCurrencyCode(),
		'symbol' => $currency_storage->load($price->getCurrencyCode())->getSymbol()
	);
}

?>